from threading import Thread
import socket, pickle
from biblio import *


# Reception buffer size
BUFF_SIZE = 16384


class Message:
    ciph = None
    clair = None
    key = None
    sender = None
    count = None
    sign = None
    hmac = None
    ack = False


def wrap(msg, sender, count, key):
   message = Message()
   message.ciph = encrypt(msg, key)
   message.key = key
   message.sender = sender
   message.count = count
   message.sign = sign_rsa(message.ciph[0], ID_priv)
   message.hmac = hash512(message.ciph[0] + key)
   data = pickle.dumps(message)
   return data


def unwrap(data):
    message = pickle.loads(data)
    # Décodage du message
    message.clair = decrypt(message.ciph[1], message.key)
    return message


def Send(socket):
    # Initialisation du counter de messages
    counter = 0
    # Initialisation de la clé chainée
    chain_key = kdf(SK, random.random())[0]
    while True:
        msg = input()
        sender = nickname
        counter = counter + 1
        # Dérivation des Ratchet keys
        key = kdf(chain_key, msg)
        message_key = hash512(key[0])
        chain_key = hash512(key[1])
        data = wrap(msg, sender, counter, message_key)
        try:
            if msg == 'EXIT':
                socket.close()
                break
            else:
                socket.send(data)
        except:
            # Close Connection When Error
            print("An error occured!")
            socket.close()
            break


def Reception(socket):
    while True:
        requete_server = socket.recv(BUFF_SIZE)
        message_server = unwrap(requete_server)
        # Verification de la signature du message chiffré
        assert verif_rsa(message_server.ciph[0], message_server.sign, bob_pub_keys.id_pub)
        assert message_server.hmac == hash512(message_server.ciph[0] + message_server.key)
        # Acquittement de reception du massage
        assert not message_server.ack
        # Afffichage du message en clair
        print(f"{message_server.sender}: {message_server.clair}")


#username
nickname = input("Choose your nickname: ")
#mdp = input("Choose your password: ")

Host = "127.0.0.1"
Port = 55555

#Création du socket
socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
socket.connect((Host, Port))

#Send nickname to server
nick = nickname.encode('utf-8')
socket.send(nick)

#Receive Diffie-Hellman Parameters from server
DH_p = int(socket.recv(BUFF_SIZE).decode('utf-8'))
DH_g = int(socket.recv(BUFF_SIZE).decode('utf-8'))

#Initialisation des clés
ID = rsa_key_gen()
ID_priv = ID[1]
ID_pub = ID[0]


SigPK = random.choice(LARGE_PRIMES)[0]
SigPK_pub = expo(DH_g, SigPK, DH_p)

Sign_SigPK_pub = sign_rsa(SigPK_pub, ID_priv)

Eph = random.choice(LARGE_PRIMES)[0]
Eph_pub = expo(DH_g, Eph, DH_p)

OtPK = [
[24003162243189685952775722130281374941894575896781712066326296126938833048637359328586314706232195701753047235975043581393598268515519820321059615597670015018973596554710384779771825985765649837470784251048052879825748249916691847087739630103118368368781643122163992233186279567174152138449441543986930654000358861301621238018589007071846593859426408684791009462628730720316035069810161093508668607259737440097209206197255571771062976125691462135718708099212659341300283753827244841378875402558747609280450076884673115460298101881830137293359232148085183427063032736721741087543177127957308413246715252456167121269361, 7],
[24111691596756605212444934471817503800089224354482643286252784835943870820734719751473363267712634059736238174299381991275214791140252664569502961120494308700732288631876163015172017436026937347634432604576488375984820996876699313506852347714062134004631627616185558458376457712552324373369749375317936896288075125398639848868869210710854207256042776219445232932460373722510216434706954731802943672165722647431824537205885187172741471588162233293833785075773633980018802783947502278033018624904869690390536979241521319831069748489728549567661868683624654397587840490604359272033799710358905524283276754558108544258483, 2],
[20269612871884622120973964448904828914108815491930480646399499391310716995938633780431427581809910232447532679025429350484980011840202156061996630065612432143707914788687502666517623778953957068919516643296592593757669781684829473714619682949531338387757811982538622104822556194269979022337307702047447518560559757220424136620172329433226169464893513101656835031121799778876535675787764196080914855578823978825496048785084893926467098210435999427769052139038718311540890699704684333087202660789856454128447326543879876802279415486752656490748715158987893326688166856718947720199872538448003653070183783534933551290789, 2],
[31712908132077942160073808772837568936894310392607903007963478718945469317317408231157122177186153590794063217378765262022956068284483411630445170622871168526039965402301407066026236783792522634222713809211291629182801853646644670234115194203345892612422474172957560944697423243849754821529936790314058029430365945892617299527854924695617915994445722258259103545610474620992263233640345378462277418963552555959274610012341572927700802550893831788509993328048689707960978072113389113177444062368577394001320788491488340299217733491302090038605546136144181463066591743267416520296723772135227810249284855210959511194787, 2],
[19327012831740627169040894927401100799863220377061917545584111135882734348846249299404115187400112340571233265592584654447801355119061162821736160673386051325463983574945077636811711770288627467061539907434273940290688901970549893115696125502237720284933944835371442456047720404605251203234533121334104302215868138663451854568246194856468132878201473542908983123082018186917984359755288660517052796514978174094148856769025342607124068084533898889130785045979459351450511417509462539163627348897494991213712538558954237243949488572823218141395970838752238535110010271867876065029309114568504323216682442643190616027657, 3],
[29893093180935840671190708070894410385725499336437099878639015825910049424281454220476484312135449085946099923732420762137651897771782234083284977681883135160338985766724367769486927058523829330885793210549491925823053397817690822793342740861135668031247201757816273186106108269704827309739710546654050158265598799128762117940051798827887793417990013406740016181554589215058696630747640959757915185984300718182616438214702958112807894282264254020816239822385567209600879306759954475338243492980656295361298109472830637038941331777586366847370370061131682448208318065460398108428462198705642447521695342544768769947467, 2],
[28139196019689834933615579380370839554543712675983585088860410865900050128390513665146543010582314946433493785498643516278174858004099951429107340393463150744987581854054780188626811126524717741589287485675745801331759202741345716270086099599297963313228007056298698044877552891362349347703497966060263573942891483439193025144485988997491083947532024831458437972953312231466955851911517636281944126488513411100737873462527172394499940035594643172704481687878483041383546516431667918970954895303634217392595063174139520726111284651191837651588150627753157357930953921836978785394153067921036826427359474508852194053713, 3],
[18077063939315425697024760630132160722913877159403446498180224558255162795951093867341224658261999851050928328459648295281980323818592090099120680296106933295072184000000871532949850155917496506787031059816182717803260637234929010919307758998404440071728210301060516094816855899798518653188675452931946900791853860811079966454891880595841485062991675294430190481842483576350979458182591727449162937524162273916156044887032439295049779425715863225164377170549520963542065124270380524799331450293656529052562065191229195994605063075404433428674385994740246188573649780998005354963390821085213165916717130957084021762133, 2],
[18274689526994108961230658904678540302541635467604287453481708650929174965603394083406980519316650339040868705607425806715500660471290228683299082222653159071064727034748610109523338148177905911741120895683953230146073815367947997049599870076689347184553087832683464515733919531373590465405283116846273756895526955388301412668657600076861348898267833661363152392541104643552732361433754803732298385442002860294583394043329200736129839704946376012940958065323077299265771493810332488086048531952069677384406927769749016476827048995513626057988474210415832701927900438594375853983813511706880668727920766081696455686471, 3],
[22094249634778850308480089341791797487663096086489253869430693814495801885898271326014451392346518198161233051620522932296229324444448407731448203393700536970045422174018294508760004791334214935863626346439202173201410085438180399495604452071987420308374834229484572183796782967468227901521059101629758172235321910118416137842836442118045546922322318535386899952390450819436539634594750400197205916222689867338962163925191244259658000662836074197469726300181218910817627934175445666753154050543132499828553205350693529099952592986122014268545069807652019282474402030672838096596268247735611168681079016730557477364973, 2],
]
OtPKA = random.choice(OtPK)
OtPKA_index = OtPK.index(OtPKA)
OtPK_pub = expo(DH_g, OtPKA[0], DH_p)


class Keys:
    id_pub = None
    sigPK_pub = None
    sign_SigPK_pub = None
    eph_pub = None
    otPK_pub = None


#Envoi des clés au serveur
keys_bundle = Keys()
keys_bundle.id_pub = ID_pub
keys_bundle.sigPK_pub = SigPK_pub
keys_bundle.sign_SigPK_pub = Sign_SigPK_pub
keys_bundle.eph_pub = Eph_pub
keys_bundle.otPK_pub = OtPK_pub

socket.send(pickle.dumps(keys_bundle))

#Reception des clés de Bob du serveur
bob_pub_keys = pickle.loads(socket.recv(BUFF_SIZE))

#Verification de la signature de Bob
assert verif_rsa(bob_pub_keys.sigPK_pub, bob_pub_keys.sign_SigPK_pub, bob_pub_keys.id_pub)

DH1 = expo(expo(DH_g, bob_pub_keys.id_pub[1], DH_p), SigPK,  DH_p)
DH2 = expo(bob_pub_keys.eph_pub, ID_pub[1],  DH_p)
DH3 = expo(bob_pub_keys.eph_pub, SigPK,  DH_p)
DH4 = expo(bob_pub_keys.eph_pub, OtPKA[0],  DH_p)

SK = str(DH1) + str(DH2) + str(DH3) + str(DH4)


#Demarrage des interactions
envoi = Thread(target=Send, args=[socket])
recep = Thread(target=Reception, args=[socket])


envoi.start()
recep.start()